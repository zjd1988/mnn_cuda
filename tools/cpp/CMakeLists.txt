set(MNN_CPP_TOOLS "")

find_package(OpenCV REQUIRED)

add_executable(MNNV2Basic.out ${CMAKE_CURRENT_LIST_DIR}/MNNV2Basic.cpp ${CMAKE_CURRENT_LIST_DIR}/revertMNNModel.cpp)
target_link_libraries(MNNV2Basic.out ${MNN_DEPS})
list(APPEND MNN_CPP_TOOLS MNNV2Basic.out)

add_executable(mobilenetTest.out ${CMAKE_CURRENT_LIST_DIR}/mobilenetTest.cpp ${CMAKE_CURRENT_LIST_DIR}/mtcnn_net.cpp ${CMAKE_CURRENT_LIST_DIR}/common_alignment.cpp )
target_link_libraries(mobilenetTest.out ${MNN_DEPS} ${OpenCV_LIBS})
list(APPEND MNN_CPP_TOOLS mobilenetTest.out)

add_executable(backendTest.out ${CMAKE_CURRENT_LIST_DIR}/backendTest.cpp)
target_link_libraries(backendTest.out ${MNN_DEPS})
list(APPEND MNN_CPP_TOOLS backendTest.out)

add_executable(testModel.out ${CMAKE_CURRENT_LIST_DIR}/testModel.cpp)
target_link_libraries(testModel.out ${MNN_DEPS})
list(APPEND MNN_CPP_TOOLS testModel.out)

add_executable(testModelWithDescrisbe.out ${CMAKE_CURRENT_LIST_DIR}/testModelWithDescrisbe.cpp ${CMAKE_CURRENT_LIST_DIR}/Config.cpp)
target_link_libraries(testModelWithDescrisbe.out ${MNN_DEPS})
list(APPEND MNN_CPP_TOOLS testModelWithDescrisbe.out)

add_executable(getPerformance.out ${CMAKE_CURRENT_LIST_DIR}/getPerformance.cpp)
target_link_libraries(getPerformance.out ${MNN_DEPS})
list(APPEND MNN_CPP_TOOLS getPerformance.out)

add_executable(checkInvalidValue.out ${CMAKE_CURRENT_LIST_DIR}/checkInvalidValue.cpp)
target_link_libraries(checkInvalidValue.out ${MNN_DEPS})
list(APPEND MNN_CPP_TOOLS checkInvalidValue.out)

add_executable(timeProfile.out ${CMAKE_CURRENT_LIST_DIR}/timeProfile.cpp ${CMAKE_CURRENT_LIST_DIR}/revertMNNModel.cpp ${CMAKE_CURRENT_LIST_DIR}/Profiler.cpp)
target_link_libraries(timeProfile.out ${MNN_DEPS})
list(APPEND MNN_CPP_TOOLS timeProfile.out)

if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    add_executable(checkDir.out ${CMAKE_CURRENT_LIST_DIR}/checkDir.cpp)
    add_executable(checkFile.out ${CMAKE_CURRENT_LIST_DIR}/checkFile.cpp)
    add_executable(winogradExample.out ${CMAKE_CURRENT_LIST_DIR}/winogradExample.cpp)
    target_link_libraries(winogradExample.out ${MNN_DEPS})
    add_executable(winogradGenerateGLSL.out ${CMAKE_CURRENT_LIST_DIR}/winogradGenerateGLSL.cpp)
    target_link_libraries(winogradGenerateGLSL.out ${MNN_DEPS})
    add_executable(winogradGenerateCL.out ${CMAKE_CURRENT_LIST_DIR}/winogradGenerateCL.cpp)
    target_link_libraries(winogradGenerateCL.out ${MNN_DEPS})
endif()

if (MSVC OR WIN32)
    foreach(TARGET ${MNN_CPP_TOOLS})
        target_compile_definitions(${TARGET} PRIVATE "_CRT_SECURE_NO_WARNINGS")
        if (NOT MNN_BUILD_SHARED_LIBS)
            foreach (DEPEND ${MNN_DEPS})
                target_link_options(${TARGET} PRIVATE /WHOLEARCHIVE:$<TARGET_FILE:${DEPEND}>)
            endforeach ()
        endif()
    endforeach()
endif()
